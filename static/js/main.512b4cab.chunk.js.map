{"version":3,"sources":["components/contactList/contactListItem/ContactListItem.module.css","components/contactList/ContactList.module.css","redux/contacts/contactsActions.js","components/contactForm/ContactForm.js","components/contactList/contactListItem/ContactListItem.js","components/contactList/ContactList.js","components/filter/Filter.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/contactForm/ContactForm.module.css"],"names":["module","exports","exportActions","addContact","createAction","name","number","payload","id","uuidv4","removeContact","changeFilter","ContactForm","state","nameInputId","numberInputId","handleChangeInput","e","target","value","setState","handleSubmit","preventDefault","props","contacts","map","contact","toLowerCase","includes","alert","console","log","onSubmit","className","styles","FormEditor","this","FormEditorLabel","htmlFor","FormEditorInput","type","pattern","title","required","onChange","FormEditorButton","Component","connect","items","dispatch","contactsActions","ContactListItem","onRemoveContact","ContactListButton","onClick","getFilteredContacts","allContacts","filter","normalizedFilter","length","ContactList","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","defaultStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.512b4cab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListItem\":\"ContactListItem_ContactListItem__2dqPH\",\"completed\":\"ContactListItem_completed__3szFw\",\"ContactListButton\":\"ContactListItem_ContactListButton__a7uzF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3v8df\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction(\"contacts/remove\");\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nconst exportActions = { addContact, removeContact, changeFilter };\r\nexport default exportActions;\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: { id: uuidv4(), name, number },\r\n// });\r\n\r\n// const removeContact = (contactId) => ({\r\n//   type: types.REMOVE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    const contactIncludesName = contacts\r\n      .map((contact) => contact.name.toLowerCase())\r\n      .includes(name.toLowerCase());\r\n    if (contactIncludesName) {\r\n      return alert(`${name} is already in contacts`);\r\n    }\r\n    console.log(`contacts`, name);\r\n    this.props.onSubmit(name, number);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <form className={styles.FormEditor} onSubmit={this.handleSubmit}>\r\n          <label className={styles.FormEditorLabel} htmlFor={this.nameInputId}>\r\n            Name\r\n            <input\r\n              className={styles.FormEditorInput}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={this.state.name}\r\n              onChange={this.handleChangeInput}\r\n              id={this.nameInputId}\r\n            />\r\n          </label>\r\n          <label\r\n            className={styles.FormEditorLabel}\r\n            htmlFor={this.numberInputId}\r\n          >\r\n            Number\r\n            <input\r\n              className={styles.FormEditorInput}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              value={this.state.number}\r\n              onChange={this.handleChangeInput}\r\n              id={this.numberInputId}\r\n            />\r\n          </label>\r\n          <button className={styles.FormEditorButton} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n// };\r\n\r\nconst mapstateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport styles from \"./ContactListItem.module.css\";\r\n\r\nconst ContactListItem = ({ contact, onRemoveContact }) => (\r\n  <li className={styles.ContactListItem}>\r\n    {contact.name + \":\" + contact.number}\r\n    {\r\n      <button\r\n        className={styles.ContactListButton}\r\n        type=\"button\"\r\n        name=\"delete\"\r\n        onClick={() => onRemoveContact(contact.id)}\r\n      >\r\n        delete\r\n      </button>\r\n    }\r\n  </li>\r\n);\r\n\r\n// ContactListItem.propTypes = {\r\n//   onRemoveContact: PropTypes.func.isRequired,\r\n//   id: PropTypes.string.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default ContactListItem;\r\n","import React from \"react\";\r\nimport ContactListItem from \"./contactListItem/ContactListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n  <>\r\n    {contacts.length > 0 && <h2>Contacts</h2>}\r\n    <ul className={styles.ContactList}>\r\n      {contacts.map((contact) => (\r\n        <ContactListItem\r\n          key={contact.id}\r\n          contact={contact}\r\n          onRemoveContact={onRemoveContact}\r\n        />\r\n      ))}\r\n    </ul>\r\n  </>\r\n);\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onRemoveContact: (id) => dispatch(contactsActions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContaсtList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      <ContaсtList />\n    </>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     // contacts: [],\n//     // filter: \"\",\n//   };\n\n//   // componentDidMount() {\n//   //   const contacts = localStorage.getItem(\"contacts\");\n//   //   const parsedContacts = JSON.parse(contacts);\n\n//   //   if (parsedContacts) {\n//   //     this.setState({ contacts: parsedContacts });\n//   //   }\n//   // }\n\n//   // componentDidUpdate(prevProps, prevState) {\n//   //   const nextContacts = this.state.contacts;\n//   //   const prevContacts = prevState.contacts;\n\n//   //   if (nextContacts !== prevContacts) {\n//   //     localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n//   //   }\n//   // }\n\n//   // addContact = (data) => {\n//   //   const contactIncludesName = this.state.contacts\n//   //     .map((contact) => contact.name.toLowerCase())\n//   //     .includes(data.name.toLowerCase());\n//   //   if (contactIncludesName) {\n//   //     return alert(`${data.name} is already in contacts`);\n//   //   }\n//   //   const contact = { id: uuidv4(), name: data.name, number: data.number };\n//   //   this.setState((prev) => ({ contacts: [contact, ...prev.contacts] }));\n//   // };\n\n//   // removeContact = (contactId) => {\n//   //   this.setState((prevState) => {\n//   //     return {\n//   //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//   //     };\n//   //   });\n//   // };\n\n//   // changeFilter = (e) => this.setState({ filter: e.target.value });\n\n//   render() {\n//     // const { filter } = this.state;\n//     // const filteredContacts = this.getFilteredContacts();\n//     return (\n//       <>\n//         <h1>Phonebook</h1>\n//         <ContactForm />\n//         <h2>Contacts</h2>\n//         <Filter />\n//         <ContaсtList />\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contactsActions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.REMOVE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   logger,\r\n// ];\r\nconst middleware = (getDefaultMiddleware) =>\r\n  getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }).concat(logger);\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst defaultStore = { store, persistor };\r\nexport default defaultStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        \n          <App />\n        \n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormEditor\":\"ContactForm_FormEditor__178G_\",\"FormEditorLabel\":\"ContactForm_FormEditorLabel__1ffaz\",\"FormEditorInput\":\"ContactForm_FormEditorInput__fv8K8\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__2pf8N\",\"FormEditorButton\":\"ContactForm_FormEditorButton__3v_cA\"};"],"sourceRoot":""}